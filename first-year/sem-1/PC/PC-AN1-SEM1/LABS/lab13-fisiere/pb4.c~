/*

    Se consideră un fișier text ce conține un număr necunoscut de linii de text de o dimensiune necunoscută. Să se scrie un program ce citește un astfel de fișier și stochează datele într-un tablou alocat dinamic de string-uri C alocate dinamic. Se va folosi o amprentă minimă de memorie. Se vor scrie de asemenea și următoarele funcții

    o funcție void write_sort(char **lines, char *filepath); - funcția va prelua tabloul de linii, le va sorta alfabetic și le va scrie în fișierul cu calea filepath. Se va realiza conex și o funcție de sortare a tabloului de linii lines. Se poate folosi bubble-sort. Pentru compararea aflabetică a două linii se poate folosi funcția strcmp(...)
    o funcție void write_random(char **lines, char *filepath); - funcția va prelua tabloul de linii și le va scrie în fișierul referit prin calea filepath în ordine aleatoare a liniilor. Hint ! Se poate folosi funcția rand(....);
    o funcție uint32_t find_word(char **lines, char *word); - funcția va căuta cuvântul referit prin word în tabloul de linii lines și va returna numărul de apariții.

 */

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

char **linii;  // char **linii <=> char *linii[]
int nLinii;
FILE *fin;

void adaugaLinie(char *linie)
{
  char *linieNoua = (char *)malloc((strlen(linie)+1)*sizeof(char));
  if(linieNoua==NULL)
    {
      printf("Memorie insuficienta!\n");
      exit(EXIT_FAILURE);
    }

  strcpy(linieNoua,linie);

  char **p = (char **)realloc(linii, (nLinii+1)*sizeof(char *));  // char *p[] <=> char **p
  if(p==NULL)
    {
      printf("Memorie insuficienta!\n");
      free(linieNoua);
      exit(EXIT_FAILURE);
    }
  linii = p;
  linii[nLinii] = linieNoua;
  nLinii++;
  
}

int main(void)
{
  char *p = NULL;
  p = (char *)malloc((strlen(linie)+1)*sizeof(char));
  fin = fopen("scrisoare.txt","r");

  if(fin == NULL)
    {
      printf("Fisierul nu s-a putut deschide!");
      exit(EXIT_FAILURE);
    }
  return 0;
}
